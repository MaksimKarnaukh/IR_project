from test import calculatePrecisionAndRecallfrom utils import *from related_doc_retrieval import *filepath_video_games = 'input/video_games.txt'csv_doc_dict = './output/processed_docs.csv.gz'def return_similar_documents(doc_dict, query: str, by_title: bool = False, num_results: int = 10):    documents = list(doc_dict.values())    document_titles = list(doc_dict.keys())    retrieval_system = RelatedDocumentsRetrieval(document_titles, documents)    similar_documents_titles, similar_documents = [], []    if by_title:        query_document = doc_dict[query]        similar_documents_titles, similar_documents = retrieval_system.retrieve_similar_documents(query_document, query, num_results)    else:        similar_documents_titles, similar_documents = retrieval_system.retrieve_similar_documents(query, "", num_results)    print("Query Document:", query)    print("Similar Documents:")    for i, doc in enumerate(similar_documents_titles, 1):        print(f"{i}. {doc}")    filepath_path_gt = 'input/gt'    d = read_gt(filepath_path_gt)  # Read ground truth    print(d[title])    expected = list(d[title].keys())    par = calculatePrecisionAndRecall(d[title], similar_documents_titles)    print("fraction of relevant instances among the retrieved instances: ", par[0])    print("fraction of relevant instances that were retrieved: ", par[1])if __name__ == '__main__':    doc_dict = getDocDict(filepath_video_games=filepath_video_games, csv_doc_dict=csv_doc_dict)    title = "Assassin's Creed IV: Black Flag"    query_document = doc_dict[title]    return_similar_documents(doc_dict, query="In the game, players have the choice to compete across any of the game modes.", by_title=False, num_results=5)