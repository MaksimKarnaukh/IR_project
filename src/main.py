from test import calculatePrecisionAndRecallfrom utils import *from data_preprocessor import *import osfrom related_doc_retrieval import *filepath_video_games = 'input/video_games.txt'csv_doc_dict = './output/processed_docs.csv.gz'if __name__ == '__main__':    doc_dict = getDocDict(filepath_video_games=filepath_video_games, csv_doc_dict=csv_doc_dict)    # Using a loop to print the first 20 key-value pairs    # count = 0    # for key, value in doc_dict.items():    #     print(f"{key}: {value}")    #     count += 1    #     if count == 20:    #         break    # # Preprocess the text    # input_text = "In the game, players have the choice to compete across any of the game modes."    # preprocessor = DataPreprocessor()    # preprocessed_text = preprocessor.preprocess_text(input_text)    # print("Original Text:", input_text)    # print("Preprocessed Text:", preprocessed_text)    documents = list(doc_dict.values())    document_titles = list(doc_dict.keys())    retrieval_system = RelatedDocumentsRetrieval(document_titles, documents)    retrieval_system.tfidf_matrix = retrieval_system.vectorize_documents(documents)    # query_document = "DuckTales 2 is a platform video game"    title = "Assassin's Creed IV: Black Flag"    query_document = doc_dict[title]    similar_documents_titles, similar_documents = retrieval_system.retrieve_similar_documents(query_document, title, 10)    print("Query Document:", query_document)    print("Similar Documents:")    for i, doc in enumerate(similar_documents_titles, 1):        print(f"{i}. {doc}")    filepath_path_gt = 'input/gt'    d = read_gt(filepath_path_gt)  # Read ground truth    print(d[title])    expected = list(d[title].keys())    par = calculatePrecisionAndRecall(d[title], similar_documents_titles)    print("fraction of relevant instances among the retrieved instances: ", par[0])    print("fraction of relevant instances that were retrieved: ", par[1])